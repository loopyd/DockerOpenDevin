#!/bin/bash

# Shell configuration
shopt -s extglob
set -Eeo pipefail

# Global variables
DEBUG=${DEBUG:-false}
ACTION=${ACTION:-}
SUBACTION=${SUBACTION:-}
WORKDIR=${WORKDIR:-./app}
LANG=${LANG:-}
TIMEZONE=${TIMEZONE:-}
BARGS=""
CSCRIPT_DIR=$(dirname "$0")

# Colors
C_DARK_WHITE="\033[0;30m"
C_WHITE="\033[0;37m"
C_YELLOW="\033[0;33m"
C_RED="\033[0;31m"
C_BLUE="\033[0;34m"
C_GREEN="\033[0;32m"
C_BOLD_WHITE="\033[1;37m"
C_BOLD_YELLOW="\033[1;33m"
C_BOLD_RED="\033[1;31m"
C_BOLD_BLUE="\033[1;34m"
C_BOLD_GREEN="\033[1;32m"
C_RESET="\033[0m"

# Function to print a debug message
function debug() {
    if [ "$DEBUG" = true ]; then
        echo -e "${C_DARK_WHITE}$(date +"%Y-%m-%d %H:%M:%S")${C_RESET} ${C_WHITE}[${C_RESET}${C_BOLD_WHITE}DEBUG  ${C_RESET}${C_WHITE}]${C_RESET} ${C_WHITE}$1${C_RESET}" >&2
    fi
}

# function to print a warning message
function warn() {
    echo -e "${C_DARK_WHITE}$(date +"%Y-%m-%d %H:%M:%S")${C_RESET} ${C_YELLOW}[${C_RESET}${C_BOLD_YELLOW}WARNING${C_RESET}${C_YELLOW}]${C_RESET} ${C_YELLOW}$1${C_RESET}" >&2
}

# function to print an error message
function err() {
    echo -e "${C_DARK_WHITE}$(date +"%Y-%m-%d %H:%M:%S")${C_RESET} ${C_RED}[${C_RESET}${C_BOLD_RED}ERROR  ${C_RESET}${C_RED}]${C_RESET} ${C_RED}$1${C_RESET}" >&2
}

# Function to print an info message
function info() {
    local C_RESET="\033[0m"
    echo -e "${C_DARK_WHITE}$(date +"%Y-%m-%d %H:%M:%S")${C_RESET} ${C_BLUE}[${C_RESET}${C_BOLD_BLUE}INFO   ${C_RESET}${C_BLUE}]${C_RESET} ${C_BLUE}$1${C_RESET}"
}

# Function to print a success message
function success() {
    local C_RESET="\033[0m"
    echo -e "${C_DARK_WHITE}$(date +"%Y-%m-%d %H:%M:%S")${C_RESET} ${C_GREEN}[${C_RESET}${C_BOLD_GREEN}SUCCESS${C_RESET}${C_GREEN}]${C_RESET} ${C_GREEN}$1${C_RESET}"
}

# Function to trap exit signals
function _exit_trap() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        err "Error: Process exited with status code: $exit_code"
    else
        success "$0 exited successfully"
    fi
    unset BUILDKIT_PROGRESS
    cd "$CSCRIPT_PATH"
    exit $exit_code
}

# Function to run a command
function __run() {
    if [ "$DEBUG" = true ]; then
        local _env_before
        _env_before=$(printenv | sort)
        debug "Running: $*"
        eval "$*" || {
            return $?
        }
        local _env_after
        _env_after=$(printenv | sort)
        local _env_diff
        _env_diff=$(diff <(echo "$_env_before") <(echo "$_env_after") | grep '^[<>]' | sed 's/^< //;s/^> //')
        if [[ -n "$_env_diff" ]]; then
            debug "Environment Changes: $_env_diff"
        fi
    else
        eval "$* >/dev/null 2>&1" || {
            return $?
        }
    fi
}

# Function to safely remove a directory
function __safe_rmdir() {
    local DIR="$1"
    if [ -d "$DIR" ]; then
        sudo rm -rfv "$DIR" || {
            sudo chown -R $(whoami) "$DIR"
            sudo chmod -R u+rww "$DIR"
            sudo rm -rfv "$DIR" || {
                err "Failed to remove directory $DIR"
                return 1
            }
        }
    else
        warning "Directory $DIR does not exist"
        return 0
    fi
}

# This function checks if a Docker Swarm mode is initialized on this host.
function __is_docker_swarm_initialized() {
    if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" == "inactive" ]; then
        return 1
    else
        return 0
    fi
}

# This fnction checks if a docker network exists
function __docker_network_exists() {
    local NETWORK_NAME="$1"
    if [ -z "$NETWORK_NAME" ]; then
        err "NETWORK_NAME is required"
        return 1
    fi
    local NODE_ID
    NODE_ID=$(docker info --format '{{.Swarm.NodeID}}')
    if [ -z "$NODE_ID" ]; then
        return 1
    fi
    local NETWORK_ID
    NETWORK_ID=$(docker network ls -q --filter name="$NETWORK_NAME" --format="{{.Name}}" | tr -d '\n')
    if [ "$NETWORK_ID" != "$NETWORK_NAME" ]; then
        return 1
    else
        return 0
    fi
}

# This function checks if a docker container exists
function __docker_container_exists() {
    local CONTAINER_NAME="$1"
    if [ -z "$CONTAINER_NAME" ]; then
        err "CONTAINER_NAME is required"
        return 1
    fi
    local CONTAINER_ID
    CONTAINER_ID=$(docker container ps -a --format '{{ .Image }}' | grep -E "^$CONTAINER_NAME$")
    debug "CONTAINER_ID: $CONTAINER_ID"
    if [ "$CONTAINER_ID" != "$CONTAINER_NAME" ]; then
        return 1
    else
        return 0
    fi
}

# Function to check if a docker volume exists
function __docker_volume_exists() {
    local VOLUME_NAME="$1"
    if [ -z "$VOLUME_NAME" ]; then
        err "VOLUME_NAME is required"
        return 1
    fi
    local VOLUME_ID
    VOLUME_ID=$(docker volume ls -q --filter name="$VOLUME_NAME" --format "{{.Name}}" | tr -d '\n')
    if [ "$VOLUME_ID" != "$VOLUME_NAME" ]; then
        return 1
    else
        return 0
    fi
}

# This function checks if a docker service exists
function __docker_service_exists() {
    local SERVICE_NAME="$1"
    if [ -z "$SERVICE_NAME" ]; then
        err "SERVICE_NAME is required"
        return 1
    fi
    local NODE_ID
    NODE_ID=$(docker info --format '{{.Swarm.NodeID}}')
    if [ -z "$NODE_ID" ]; then
        return 1
    fi
    local SERVICE_ID
    SERVICE_ID=$(docker service ls -q --filter name="$SERVICE_NAME" --format "{{.Name}}" | tr -d '\n')
    if [ "$SERVICE_ID" != "$SERVICE_NAME" ]; then
        return 1
    else
        return 0
    fi
}

# This function checks if a Docker stack exists.
function __docker_stack_exists() {
    local STACK_NAME="$1"
    if [ -z "$STACK_NAME" ]; then
        err "STACK_NAME is required"
        return 1
    fi
    local STACK_ID
    STACK_ID=$(docker stack ls --format "{{.Name}}" | grep -E "^$STACK_NAME$" | tr -d '\n')
    debug "STACK_ID: $STACK_ID"
    if [ "$STACK_ID" != "$STACK_NAME" ]; then
        return 1
    else
        return 0
    fi
}

# This function checks if a Docker image exists
function __docker_image_exists() {
    local IMAGE_NAME
    IMAGE_NAME="$1"
    if [ -z "$IMAGE_NAME" ]; then
        err "IMAGE_NAME is required"
        return 1
    fi
    local IMAGE_ID
    IMAGE_ID=$(docker image ls --filter reference="$IMAGE_NAME" --format "{{.Repository}}:{{.Tag}}" | grep -E "^$IMAGE_NAME")
    debug "IMAGE_ID: ${IMAGE_ID[*]}"
    if [ -z "$IMAGE_ID" ]; then
        return 1
    else
        return 0
    fi
}

# This function creates a Docker Swarm.
function docker_swarm_init() {
    if ! __is_docker_swarm_initialized; then
        info "Initializing Docker Swarm mode: $(hostname) @ ${IP_ADDRESS}..."
        local IP_ADDRESS
        IP_ADDRESS=$(hostname -I | cut -d' ' -f1)
        debug "IP_ADDRESS: $IP_ADDRESS"
        __run docker swarm init \
            --advertise-addr "$IP_ADDRESS" || {
            err "Failed to initialize Docker Swarm mode."
            return 1
        }
        success "Docker Swarm mode initialized successfully."
        return 0
    else
        warn "Docker Swarm mode is already initialized."
        return 0
    fi
}

# This function leaves a Docker Swarm.
function docker_swarm_leave() {
    if __is_docker_swarm_initialized; then
        info "Leaving Docker Swarm mode..."
        __run docker swarm leave --force || {
            err "Failed to leave Docker Swarm mode."
            return 1
        }
        success "Docker Swarm mode left successfully."
        return 0
    else
        warn "Docker Swarm mode is not initialized, not leaving swarm."
        return 0
    fi
}

# This function deploys a Docker Stack to the Swarm
function docker_stack_deploy() {
    local FARGS=($*)
    if [ ${#FARGS[@]} -lt 1 ]; then
        err "STACK_NAME is required as the last argument"
        return 1
    fi
    local STACK_NAME="${FARGS[-1]}"
    if ! __is_docker_swarm_initialized; then
        err "Docker Swarm mode is not initialized."
        return 1
    fi
    if ! __docker_stack_exists "$STACK_NAME"; then
        info "Deploying stack: $STACK_NAME..."
        __run docker stack deploy ${FARGS[@]} || {
            err "Failed to deploy stack: $STACK_NAME"
            return 1
        }
    else
        warn "Manager stack: $STACK_NAME already exists."
        return 0
    fi
    success "Docker Swarm initialization is complete."
    return 0
}

# This function tears down a Docker Stack
function docker_stack_down() {
    local FARGS=($*)
    if [ ${#FARGS[@]} -lt 1 ]; then
        err "STACK_NAME is required as the last argument"
        return 1
    fi
    local STACK_NAME="${FARGS[-1]}"
    if ! __is_docker_swarm_initialized; then
        warn "Docker Swarm mode is not initialized, not bringing down stack: $STACK_NAME."
        return 1
    fi
    if __docker_stack_exists "$STACK_NAME"; then
        info "Removing stack: $STACK_NAME..."
        __run docker stack rm ${FARGS[@]} || {
            err "Failed to remove stack: $STACK_NAME"
            return 1
        }
    else
        warn "Stack: $STACK_NAME does not exist."
        return 0
    fi
    success "Docker Stack removal is complete."
    return 0
}

# This function brings up a docker network
function docker_network_up() {
    local FARGS=($*)
    local NETWORK_NAME="${FARGS[-1]}"
    if ! __docker_network_exists "$NETWORK_NAME"; then
        info "Creating network: $NETWORK_NAME..."
        __run docker network create ${FARGS[@]} || {
            err "Failed to create network: $NETWORK_NAME"
            return 1
        }
        success "Network: $NETWORK_NAME created successfully."
        return 0
    else
        warn "Network: $NETWORK_NAME already exists."
        return 0
    fi
}

# This function tears down a docker network
function docker_network_down() {
    local NETWORK_NAME="$1"
    if [ -z "$NETWORK_NAME" ]; then
        err "NETWORK_NAME is required"
        return 1
    fi
    debug "NETWORK_NAME: $NETWORK_NAME"
    if __docker_network_exists "$NETWORK_NAME"; then
        local _endpointNames=()
        mapfile -t _endpointNames < <(docker network inspect "$_network" --format="{{range .Containers}}{{.Name}} {{end}}" | sed 's/ /\n/g')
        for _endpointName in "${_endpointNames[@]}"; do
            if [ -z "$_endpointName" ]; then
                continue
            fi
            info "Disconnecting network: $_network from endpoint: $_endpointName..."
            __run docker network disconnect --force "$_network" "$_endpointName" || {
                err "Failed to disconnect network: $_network from endpoint: $_endpointName"
                return 1
            }
        done
        info "Trying to remove network: $_network..."
        local TIMEOUT=0
        while __docker_network_exists "$_network" && [ $TIMEOUT -lt 5 ]; do
            __run docker network rm "$_network" || true
            sleep 1s
        done
        if [ $TIMEOUT -ge 5 ]; then
            err "Timeout occoured while trying to remove network: $_network"
            return 1
        else
            success "Network: $_network went down successfully."
            return 0
        fi
    else
        warn "Network: $NETWORK_NAME does not exist."
        return 0
    fi
    success "Network: $NETWORK_NAME went down successfully."
    return 0
}

# This function tears down all the networks.
function docker_networks_down() {
    local FARGS=($*)
    local _networks=()
    mapfile -t _networks < <(docker network ls -q ${FARGS[*]} --format="{{.Name}}")
    if [ ${#_networks[@]} -eq 0 ]; then
        warn "No networks found to remove, no action taken."
        return 0
    fi
    local FAILED=0
    for _network in "${_networks[@]}"; do
        if [ -z "$_network" ]; then
            continue
        fi
        docker_network_down "$_network" || {
            FAILED=$((FAILED + 1))
        }
    done
    if [ $FAILED -gt 0 ]; then
        err "Failed to remove ${FAILED} network(s)."
        return 1
    else
        success "All networks went down successfully."
        return 0
    fi
}

# This function brings up a Docker service
function docker_service_up() {
    local FARGS=($*)
    if [ ${#FARGS[@]} -lt 1 ]; then
        err "SERVICE_NAME is required as the last argument"
        return 1
    fi
    local SERVICE_NAME="${FARGS[-1]}"
    if ! __docker_service_exists "$SERVICE_NAME"; then
        info "Creating service: $SERVICE_NAME..."
        __run docker service create ${FARGS[@]} || {
            err "Failed to create service: $SERVICE_NAME"
            return 1
        }
        success "Service: $SERVICE_NAME created successfully."
        return 0
    else
        warn "Service: $SERVICE_NAME already exists."
        return 0
    fi
}

# This function tears down a Docker service
function docker_service_down() {
    local FARGS=($*)
    if [ ${#FARGS[@]} -lt 1 ]; then
        err "SERVICE_NAME is required as the last argument"
        return 1
    fi
    local SERVICE_NAME="${FARGS[-1]}"
    if __docker_service_exists "$SERVICE_NAME"; then
        info "Removing service: $SERVICE_NAME..."
        __run docker service rm ${FARGS[@]} || {
            err "Failed to remove service: $SERVICE_NAME"
            return 1
        }
    else
        warn "Service: $SERVICE_NAME does not exist."
        return 0
    fi
    success "Service: $SERVICE_NAME went down successfully."
    return 0
}

# This function tears down all the docker services
function docker_services_down() {
    local FARGS=($*)
    local _services=()
    mapfile -t _services < <(docker service ls -q ${FARGS[@]} --format="{{.ID}}")
    if [ ${#_services[@]} -eq 0 ]; then
        warn "No services found to remove, no action taken."
        return 0
    fi
    local _failed=0
    for _service in "${_services[@]}"; do
        if [ -z "$_service" ]; then
            continue
        fi
        docker_service_down "$_service" || {
            _failed=$((_failed + 1))
        }
    done
    if [ $_failed -gt 0 ]; then
        err "Failed to remove ${_failed} service(s)."
        return 1
    else
        success "All services went down successfully."
        return 0
    fi
}

# This function cleans up all the docker volumess on the host
function docker_volumes_remove() {
    local FARGS=($*)
    local _volumes=()
    mapfile -t _volume < <(docker volume ls -q ${FARGS[@]} --format '{{.Name}}')
    local _failed=90
    for _volume in "${_volumes[@]}"; do
        if [ -z "$_volume" ]; then
            continue
        fi
        info "Removing volume: $_volume..."
        __run docker volume rm "$_volume" || {
            err "Failed to remove volume: $_volume"
            _failed=$((_failed + 1))
        }
    done
    if [ $_failed -gt 0 ]; then
        err "Failed to remove ${_failed} volume(s)."
        return 1
    else
        success "All volumes went down successfully."
        return 0
    fi
}

# This function cleans up all the docker images on the host
function docker_images_remove() {
    local FARGS=($*)
    local _images=()
    mapfile -t _images < <(docker image ls -q ${FARGS[@]} --format '{{.ID}}')
    local _failed=0
    for _image in "${_images[@]}"; do
        if [ -z "$_image" ]; then
            continue
        fi
        info "Removing image: $_image..."
        __run docker rmi "$_image" || {
            err "Failed to remove image: $_image"
            _failed=$((_failed + 1))
        }
    done
    if [ $_failed -gt 0 ]; then
        err "Failed to remove ${_failed} image(s)."
        return 1
    else
        success "All images went down successfully."
        return 0
    fi
}

# This function cleans up all the docker containers on the host
function docker_containers_remove() {
    local FARGS=($*)
    local _containers=()
    mapfile -t _containers < <(docker container ls -q ${FARGS[@]} --format '{{.ID}}')
    local _failed=0
    for _container in "${_containers[@]}"; do
        if [ -z "$_container" ]; then
            continue
        fi
        info "Removing container: $_container..."
        __run docker rm "$_container" || {
            err "Failed to remove container: $_container"
            _failed=$((_failed + 1))
        }
    done
    if [ $_failed -gt 0 ]; then
        err "Failed to remove ${_failed} container(s)."
        return 1
    else
        success "All containers went down successfully."
        return 0
    fi
}

# This function commits changes to a docker image from a container
function docker_container_commit() {
    local CONTAINER_NAME="$1"
    if [ -z "$CONTAINER_NAME" ]; then
        err "CONTAINER_NAME is required"
        return 1
    fi
    local IMAGE_NAME="$2"
    if [ -z "$IMAGE_NAME" ]; then
        err "IMAGE_NAME is required"
        return 1
    fi
    if ! __docker_image_exists "$IMAGE_NAME"; then
        err "Image: $IMAGE_NAME does not exist."
        return 1
    fi
    local CONTAINER_ID
    CONTAINER_ID=$(docker container ps -a --filter name="$CONTAINER_NAME" --format "{{.ID}}" | head -n1)
    debug "CONTAINER_ID: $CONTAINER_ID"
    if [ -z "$CONTAINER_ID" ]; then
        err "Container: $CONTAINER_NAME does not exist."
        return 1
    fi
    info "Committing changes from container: $CONTAINER_NAME to image: $IMAGE_NAME..."
    __run docker commit "$CONTAINER_ID" "$IMAGE_NAME" || return 1
    __run docker container rm "$CONTAINER_ID" || return 1
    success "Changes from container: $CONTAINER_NAME committed to image: $IMAGE_NAME successfully."
    return 0
}

# This function prepares the shared docker resources on the host
function prep_data() {
    local ROOT_DIR="$1"
    if [ -z "$ROOT_DIR" ]; then
        err "ROOT_DIR is required"
        return 1
    fi
    if [[ ! -d "$ROOT_DIR" ]]; then
        err "ROOT_DIR: $ROOT_DIR does not exist"
        return 1
    fi
    declare -a folders=()
    local _failed=0
    readarray -t folders <<<"$(find "${ROOT_DIR}" -type d -print | sort -u)"
    for folder in "${folders[@]}"; do
        if [[ -f "$folder/.gitkeep" ]]; then
            __run sudo rm -f "$folder/.gitkeep" || {
                err "Failed to clean folder: $folder"
                _failed=$((_failed + 1))
            }
        fi
    done
    if [ $_failed -gt 0 ]; then
        err "Failed to prepare ${_failed} folder(s) in ${ROOT_DIR}."
        return 1
    else
        success "All folders in ${ROOT_DIR} prepared successfully."
        return 0
    fi
}

# This function resets the the state of a given docker resource on the host.
function reset_data() {
    local ROOT_DIR="$1"
    if [ -z "$ROOT_DIR" ]; then
        err "ROOT_DIR is required"
        return 1
    fi
    declare -a folders=()
    readarray -t folders <<<"$(find "${ROOT_DIR}" -type d -print | sort -u)"
    if [[ -d "$ROOT_DIR" ]]; then
        __run sudo chown -R $USER:$USER "${ROOT_DIR}" || {
            err "Failed to change ownership of ${ROOT_DIR}"
            return 1
        }
        __run sudo chmod -R 1775 "${ROOT_DIR}" || {
            err "Failed to change permissions of ${ROOT_DIR}"
            return 1
        }
        __run rm -rf "${ROOT_DIR}" || {
            err "Failed to remove directory: ${ROOT_DIR}"
            return 1
        }
    fi
    if [[ ! -d "$ROOT_DIR" ]]; then
        local _failed=0
        for folder in "${folders[@]}"; do
            if [[ ! -d "$folder" ]]; then
                __run mkdir -p "$folder" || {
                    err "Failed to create directory: $folder"
                    _failed=$((_failed + 1))
                    continue
                }
                [[ $_failed -gt 0 ]] && continue
                __run sudo chown -R $USER:$USER "$folder" || {
                    err "Failed to change ownership of $folder"
                    _failed=$((_failed + 1))
                    continue
                }
                [[ $_failed -gt 0 ]] && continue
                __run sudo chmod -R 1775 "$folder" || {
                    err "Failed to change permissions of $folder"
                    _failed=$((_failed + 1))
                    continue
                }
            fi
            if [[ ! -f "$folder/.gitkeep" ]]; then
                __run touch "$folder/.gitkeep" || {
                    err "Failed to create .gitkeep file in $folder"
                    _failed=$((_failed + 1))
                    continue
                }
            fi
        done
        if [ $_failed -gt 0 ]; then
            err "Failed to reset ${_failed} folder(s) in ${ROOT_DIR}."
            return 1
        else
            success "All folders in ${ROOT_DIR} reset successfully."
            return 0
        fi
    fi
}

# This function prints the usage information.
function usage() {
    local MYACTION="$1"
    shift 1 || true
    local MYSUBACTION="$1"
    shift 1 || true
    echo -e "${C_BOLD_YELLOW}-----------------------------------------------------------------------------------${C_RESET}"
    echo -e "  ${C_BOLD_WHITE}OpenDevin${C_RESET} - Your superpowered AI coding assistant"
    echo -e "${C_BOLD_YELLOW}-----------------------------------------------------------------------------------${C_RESET}"
    echo ""
    echo -e "  ${C_BOLD_WHITE}Usage${C_RESET}"
    echo ""
    echo -e "    $0 <action> <subaction> [options] [arguments]"
    echo ""
    echo -e "  ${C_BOLD_WHITE}Global Options${C_RESET}"
    echo ""
    echo "    --help        Show this help message, and exit"
    echo "    --debug       Enable debug mode"
    echo ""
    case "$MYACTION" in
    gen)
        case "$MYSUBACTION" in
        build)
            echo -e "  ${C_BOLD_WHITE}Options${C_RESET}"
            echo ""
            echo "    -l, --language          The locale language"
            echo "    -t, --timezone          The timezone"
            echo ""
            ;;
        up)
            echo -e "  ${C_BOLD_WHITE}Options${C_RESET}"
            echo ""
            echo "    No options for this action."
            echo ""
            ;;
        down)
            echo -e "  ${C_BOLD_WHITE}Options${C_RESET}"
            echo ""
            echo "    No options for this action."
            echo ""
            ;;
        shell)
            echo -e "  ${C_BOLD_WHITE}Options${C_RESET}"
            echo ""
            echo "    -w, --workdir           The working directory"
            echo ""
            ;;
        *)
            echo -e "  ${C_BOLD_WHITE}Sub-Actions${C_RESET}"
            echo ""
            echo "    build     Build the OpenDevin runtime."
            echo "    up        Bring up the OpenDevin Application stack"
            echo "    down      Bring down the OpenDevin Application stack"
            echo "    shell     Start a shell session in the OpenDevin runtime container"
            echo ""
            ;;
        esac
        ;;
    manager)
        case "$MYSUBACTION" in
        up)
            echo -e "  ${C_BOLD_WHITE}Options${C_RESET}"
            echo ""
            echo "    No options for this action."
            echo ""
            ;;
        down)
            echo -e "  ${C_BOLD_WHITE}Options${C_RESET}"
            echo ""
            echo "    No options for this action."
            echo ""
            ;;
        *)
            echo -e "  ${C_BOLD_WHITE}Sub-Actions${C_RESET}"
            echo ""
            echo "    up        Deploy the opendevin manager stack"
            echo "    down      Remove the opendevin manager stack"
            echo ""
            ;;
        esac
        ;;
    *)
        echo -e "  ${C_BOLD_WHITE}Action (required)${C_RESET}"
        echo ""
        echo "    gen           Manage the opendevin stack"
        echo "    manager       Manage the Docker Manager stack"
        echo ""
        ;;
    esac
    echo -e "  ${C_BOLD_WHITE}Additional Arguments${C_RESET}"
    echo ""
    echo "    Any additional arguments will be passed to the action command."
    echo ""
    echo "  For assistance with a specific action, use:"
    echo ""
    echo "    $0 <action> --help"
    echo ""
    exit 0
}

# This function parses the arguments passed to the script
function parse_args() {
    if [ $# -eq 0 ]; then
        usage
    fi
    ACTION="$1"
    shift 1
    case "$ACTION" in
    gen)
        if [ $# -eq 0 ]; then
            usage gen
        fi
        if [[ ! "$1" =~ ^build|up|down|shell ]]; then
            usage gen
        else
            SUBACTION="$1"
            shift 1
        fi
        case "$SUBACTION" in
        build)
            while [ $# -gt 0 ]; do
                case "$1" in
                -h | --help)
                    usage gen build
                    break
                    ;;
                -l | --language)
                    LANG=$2
                    shift 2
                    ;;
                -t | --timezone)
                    TIMEZONE=$2
                    shift 2
                    ;;
                -d | --debug)
                    DEBUG=true
                    shift 1
                    ;;
                *)
                    BARGS+=("$1")
                    shift 1
                    break
                    ;;
                esac
            done
            ;;
        up)
            while [ $# -gt 0 ]; do
                case "$1" in
                -h | --help)
                    usage gen up
                    break
                    ;;
                -d | --debug)
                    DEBUG=true
                    shift 1
                    ;;
                *)
                    BARGS+=("$1")
                    shift 1
                    break
                    ;;
                esac
            done
            ;;
        down)
            while [ $# -gt 0 ]; do
                case "$1" in
                -h | --help)
                    usage gen clean
                    break
                    ;;
                -d | --debug)
                    DEBUG=true
                    shift 1
                    ;;
                *)
                    BARGS+=("$1")
                    shift 1
                    break
                    ;;
                esac
            done
            ;;
        shell)
            while [ $# -gt 0 ]; do
                case "$1" in
                -h | --help)
                    usage gen shell
                    break
                    ;;
                -w | --workdir)
                    WORKDIR=$2
                    shift 2
                    ;;
                -d | --debug)
                    DEBUG=true
                    shift 1
                    ;;
                *)
                    BARGS+=("$1")
                    shift 1
                    break
                    ;;
                esac
            done
            ;;
        *)
            usage gen
            ;;
        esac
        ;;
    manager)
        if [ $# -eq 0 ]; then
            usage manager
        fi
        if [[ ! "$1" =~ ^up|down ]]; then
            usage manager
        else
            SUBACTION="$1"
            shift 1
        fi
        case "$SUBACTION" in
        up)
            while [ $# -gt 0 ]; do
                case "$1" in
                -h | --help)
                    usage manager up
                    break
                    ;;
                -d | --debug)
                    DEBUG=true
                    shift 1
                    ;;
                *)
                    BARGS+=("$1")
                    shift 1
                    break
                    ;;
                esac
            done
            ;;
        down)
            while [ $# -gt 0 ]; do
                case "$1" in
                -h | --help)
                    usage manager down
                    break
                    ;;
                -d | --debug)
                    DEBUG=true
                    shift 1
                    ;;
                *)
                    BARGS+=("$1")
                    shift 1
                    break
                    ;;
                esac
            done
            ;;
        *)
            usage manager
            ;;
        esac
        ;;
    *)
        usage
        ;;
    esac
    # Add remaining arguments to BARGS
    while [ $# -gt 0 ]; do
        BARGS+=("$1")
        shift 1
    done
}

# This function builds the arguments to be passed to the docker build command
function __build_arg() {
    local ARG_NAME="$1"
    local ARG_VALUE="$2"
    if [ -n "$ARG_VALUE" ]; then
        echo "--build-arg ${ARG_NAME}=${ARG_VALUE}"
    fi
}

# This function builds the arguments to be passed to the docker run command
function __build_args() {
    local ARGS=()
    ARGS+=("$(__build_arg APP_USER ${USER})")
    ARGS+=("$(__build_arg APP_DIR /app)")
    ARGS+=("$(__build_arg LANG ${LANG})")
    ARGS+=("$(__build_arg TZ ${TIMEZONE})")
    echo "${ARGS[@]}"
}

# This function builds the arguments to be passed to the docker run command
function __env_arg() {
    local ENV_NAME="$1"
    local ENV_VALUE="$2"
    if [ -n "$ENV_VALUE" ]; then
        echo "--env ${ENV_NAME}=${ENV_VALUE}"
    fi
}

# This function builds the arguments to be passed to the docker run command
function __env_args() {
    local ARGS=()
    ARGS+=("$(__env_arg LANG ${LANG})")
    ARGS+=("$(__env_arg TZ ${TIMEZONE})")
    echo "${ARGS[@]}"
}

# This function outputs the debug flag if $DEBUG is set to true
function __debug_flag() {
    if [ "$DEBUG" == true ]; then
        echo -ne "--debug"
    fi
}

# This function is the main entry point for the script
function main() {
    if [ "$DEBUG" == true ]; then
        export BUILDKIT_PROGRESS=plain
    fi
    case $ACTION in
    gen)
        case $SUBACTION in
        build)
            __run docker container prune -f || return 1
            docker_containers_remove --filter label=com.docker.stack.namespace=opendevin || return 1
            docker_images_remove --filter label=com.docker.stack.namespace=opendevin || return 1
            docker_networks_down --filter label=com.docker.stack.namespace=opendevin || return 1
            # if __docker_image_exists "localhost:5000/opendevin-builder:latest"; then
            #     debug "Removing old base image from registry..."
            #     __run docker image rm "localhost:5000/opendevin-builder:latest" || return 1
            # fi
            # if __docker_image_exists "localhost:5000/opendevin-runtime:latest"; then
            #     debug "Removing old opendevin runtime image from registry..."
            #     __run docker image rm "localhost:5000/opendevin-runtime:latest" || return 1
            # fi
            __run docker image prune -f || return 1
            docker_network_up \
                --label=com.docker.stack.namespace="opendevin" \
                --driver=overlay \
                --subnet=172.20.0.0/16 \
                --ip-range=172.20.0.0/24 \
                --gateway=172.20.0.254 \
                --attachable \
                opendevin_net || return 1
            info "Building base image..."
            __run docker build \
                --file "./docker/Dockerfile.builder" \
                --tag "localhost:5000/opendevin-builder:latest" \
                --label "com.docker.stack.namespace=opendevin" \
                $(__build_args) \
                "./docker" || return 1
            success "Base image built successfully."
            info "Building OpenDevin runtime image..."
            __run docker build \
                --file "./docker/OpenDevin/Dockerfile.runtime" \
                --tag "localhost:5000/opendevin-runtime:latest" \
                --label "com.docker.stack.namespace=opendevin" \
                $(__build_args) \
                "./docker/OpenDevin" || return 1
            info "Executing build in OpenDevin runtime image..."
            __run docker run -it \
                --name "opendevin-prod" \
                --network "opendevin_net" \
                --volume "/var/run/docker.sock:/var/run/docker.sock" \
                --label "com.docker.stack.namespace=opendevin" \
                localhost:5000/opendevin-runtime:latest \
                build $(__debug_flag) || return 1
            success "OpenDevin runtime image built successfully."
            docker_container_commit "opendevin-prod" "localhost:5000/opendevin-runtime:latest" || return 1
            docker_network_down "opendevin_net" || return 1
            ;;
        up)
            prep_data "./docker/data" || return 1
            docker_network_up \
                --label=com.docker.stack.namespace="opendevin" \
                --driver=overlay \
                --subnet=172.20.0.0/16 \
                --ip-range=172.20.0.0/24 \
                --gateway=172.20.0.254 \
                --attachable \
                opendevin_net || return 1
            docker_stack_deploy --compose-file "./docker/bb-stack.prod.yml" "opendevin" || return 1
            ;;
        down)
            reset_data "./docker/data" || return 1
            docker_stack_down "opendevin" || return 1
            docker_networks_down --filter label=com.docker.stack.namespace=opendevin
            ;;
        shell)
            if __docker_container_exists "opendevin-shell"; then
                info "Removing old shell container..."
                __run docker rm -f "opendevin-shell" || return 1
            fi
            __run docker run \
                -it \
                --name "opendevin-shell" \
                --network "opendevin_net" \
                --volume "/var/run/docker.sock:/var/run/docker.sock" \
                --label "com.docker.stack.namespace=opendevin" \
                "localhost:5000/opendevin-runtime:latest" \
                shell || true
            docker_container_commit "opendevin-shell" "localhost:5000/opendevin-runtime:latest" || return 1
            ;;
        *)
            err "Unknown sub-action: $SUBACTION"
            exit 1
            ;;
        esac
        ;;
    manager)
        case $SUBACTION in
        up)
            docker_swarm_init || return 1
            docker_network_up \
                --label=com.docker.stack.namespace="docker_manager" \
                --driver=overlay \
                --subnet=172.19.0.0/16 \
                --ip-range=172.19.0.0/24 \
                --gateway=172.19.0.254 \
                --attachable \
                docker_manager || return 1
            docker_stack_deploy --compose-file "./docker/bb-stack.manager.yml" "docker_manager" || return 1
            ;;
        down)
            docker_stack_down "docker_manager" || return 1
            docker_networks_down --filter label=com.docker.stack.namespace=docker_manager || return 1
            docker_swarm_leave || return 1
            ;;
        *)
            err "Unknown sub-action: $SUBACTION"
            return 1
            ;;
        esac
        ;;
    *)
        echo "Unknown action: $ACTION"
        return 1
        ;;
    esac
}

trap _exit_trap EXIT SIGINT SIGTERM ERR
parse_args "$@"
main
